# 2GC Network Protocol Suite - Experimental Build
# –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ QUIC

.PHONY: help build-experimental test-experimental clean-experimental run-experimental

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
EXPERIMENTAL_BINARY := quic-test-experimental
EXPERIMENTAL_CMD := ./cmd/experimental
QLOG_DIR := ./qlog
BUILD_FLAGS := -ldflags "-X main.Version=experimental -X main.BuildTime=$(shell date -u +%Y-%m-%dT%H:%M:%SZ)"

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
	@echo "üöÄ 2GC Network Protocol Suite - Experimental Commands"
	@echo "=================================================="
	@echo ""
	@echo "Experimental QUIC Features:"
	@echo "  - ACK Frequency optimization"
	@echo "  - Switchable Congestion Control (CUBIC/BBR/BBRv2)"
	@echo "  - qlog tracing with qvis support"
	@echo "  - Multipath QUIC (experimental)"
	@echo "  - FEC for datagrams"
	@echo "  - QUIC bit greasing (RFC 9287)"
	@echo ""
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

build-experimental: ## –°–æ–±—Ä–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
	@echo "üî¨ Building experimental QUIC version..."
	@mkdir -p $(QLOG_DIR)
	go build $(BUILD_FLAGS) -o $(EXPERIMENTAL_BINARY) $(EXPERIMENTAL_CMD)
	@echo "‚úÖ Experimental binary built: $(EXPERIMENTAL_BINARY)"

test-experimental: build-experimental ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "üß™ Running experimental QUIC tests..."
	@echo ""
	@echo "Test 1: Basic experimental server"
	./$(EXPERIMENTAL_BINARY) -mode=server -addr=:9001 -cc=bbr -qlog=$(QLOG_DIR) -verbose &
	SERVER_PID=$$!; sleep 2
	@echo ""
	@echo "Test 2: Experimental client with BBR"
	./$(EXPERIMENTAL_BINARY) -mode=client -addr=127.0.0.1:9001 -cc=bbr -qlog=$(QLOG_DIR) -ack-freq=10 -duration=10s
	@echo ""
	@echo "Test 3: Experimental client with CUBIC"
	./$(EXPERIMENTAL_BINARY) -mode=client -addr=127.0.0.1:9001 -cc=cubic -qlog=$(QLOG_DIR) -ack-freq=5 -duration=10s
	@echo ""
	@echo "Test 4: Multipath test (if addresses provided)"
	@echo "Note: Multipath requires multiple network interfaces"
	@echo ""
	kill $$SERVER_PID 2>/dev/null || true
	@echo "‚úÖ Experimental tests completed"

run-experimental-server: build-experimental ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
	@echo "üöÄ Starting experimental QUIC server..."
	./$(EXPERIMENTAL_BINARY) -mode=server -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR) -greasing=true -verbose

run-experimental-client: build-experimental ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
	@echo "üöÄ Starting experimental QUIC client..."
	./$(EXPERIMENTAL_BINARY) -mode=client -addr=127.0.0.1:9000 -cc=bbr -qlog=$(QLOG_DIR) -ack-freq=10 -verbose

run-experimental-test: build-experimental ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
	@echo "üöÄ Starting experimental QUIC test..."
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR) -ack-freq=10 -fec=true -greasing=true -verbose

run-multipath-test: build-experimental ## –ó–∞–ø—É—Å—Ç–∏—Ç—å multipath —Ç–µ—Å—Ç (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
	@echo "üöÄ Starting multipath QUIC test..."
	@echo "Note: Configure multiple network interfaces for multipath"
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR) -mp="10.0.0.2:9000,10.0.0.3:9000" -mp-strategy=round-robin -verbose

benchmark-experimental: build-experimental ## –ë–µ–Ω—á–º–∞—Ä–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
	@echo "üìä Running experimental QUIC benchmarks..."
	@echo ""
	@echo "Benchmark 1: CUBIC vs BBR comparison"
	@echo "CUBIC:"
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=cubic -qlog=$(QLOG_DIR)/cubic.qlog -duration=30s -rate=1000
	@echo ""
	@echo "BBR:"
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR)/bbr.qlog -duration=30s -rate=1000
	@echo ""
	@echo "Benchmark 2: ACK Frequency optimization"
	@echo "Default ACK frequency:"
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR)/default-ack.qlog -duration=30s
	@echo ""
	@echo "Optimized ACK frequency:"
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR)/optimized-ack.qlog -ack-freq=5 -duration=30s
	@echo "‚úÖ Benchmarks completed"

analyze-qlog: ## –ê–Ω–∞–ª–∏–∑ qlog —Ñ–∞–π–ª–æ–≤ —Å qvis
	@echo "üìà Analyzing qlog files with qvis..."
	@if [ -d "$(QLOG_DIR)" ] && [ "$$(ls -A $(QLOG_DIR) 2>/dev/null)" ]; then \
		echo "Found qlog files in $(QLOG_DIR):"; \
		ls -la $(QLOG_DIR)/*.qlog 2>/dev/null || echo "No qlog files found"; \
		echo ""; \
		echo "To analyze with qvis:"; \
		echo "1. Install qvis: npm install -g qvis"; \
		echo "2. Run: qvis server $(QLOG_DIR)"; \
		echo "3. Open http://localhost:8080 in browser"; \
	else \
		echo "No qlog files found in $(QLOG_DIR)"; \
		echo "Run experimental tests first to generate qlog files"; \
	fi

clean-experimental: ## –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
	@echo "üßπ Cleaning experimental files..."
	rm -f $(EXPERIMENTAL_BINARY)
	rm -rf $(QLOG_DIR)
	@echo "‚úÖ Experimental files cleaned"

install-deps-experimental: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
	@echo "üì¶ Installing experimental dependencies..."
	go mod download
	go mod tidy
	@echo "‚úÖ Dependencies installed"

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
demo-basic: build-experimental ## –î–µ–º–æ: –±–∞–∑–æ–≤—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
	@echo "üé¨ Demo: Basic experimental QUIC features"
	@echo "=========================================="
	@echo ""
	@echo "Starting server with BBR and qlog..."
	./$(EXPERIMENTAL_BINARY) -mode=server -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR) -greasing=true &
	SERVER_PID=$$!; sleep 2
	@echo ""
	@echo "Running client with optimized ACK frequency..."
	./$(EXPERIMENTAL_BINARY) -mode=client -addr=127.0.0.1:9000 -cc=bbr -qlog=$(QLOG_DIR) -ack-freq=10 -duration=15s
	@echo ""
	@echo "Demo completed. Check qlog files in $(QLOG_DIR)"
	kill $$SERVER_PID 2>/dev/null || true

demo-cc-comparison: build-experimental ## –î–µ–º–æ: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–æ–π
	@echo "üé¨ Demo: Congestion Control comparison"
	@echo "====================================="
	@echo ""
	@echo "Testing CUBIC algorithm..."
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=cubic -qlog=$(QLOG_DIR)/cubic.qlog -duration=20s -rate=500
	@echo ""
	@echo "Testing BBR algorithm..."
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR)/bbr.qlog -duration=20s -rate=500
	@echo ""
	@echo "Testing BBRv2 algorithm..."
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbrv2 -qlog=$(QLOG_DIR)/bbrv2.qlog -duration=20s -rate=500
	@echo ""
	@echo "Demo completed. Compare qlog files:"
	@ls -la $(QLOG_DIR)/*.qlog

demo-ack-optimization: build-experimental ## –î–µ–º–æ: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ACK frequency
	@echo "üé¨ Demo: ACK Frequency optimization"
	@echo "=================================="
	@echo ""
	@echo "Default ACK frequency (auto)..."
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR)/default-ack.qlog -duration=15s
	@echo ""
	@echo "Optimized ACK frequency (5)..."
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR)/optimized-ack.qlog -ack-freq=5 -duration=15s
	@echo ""
	@echo "High frequency ACK (1)..."
	./$(EXPERIMENTAL_BINARY) -mode=test -addr=:9000 -cc=bbr -qlog=$(QLOG_DIR)/high-freq-ack.qlog -ack-freq=1 -duration=15s
	@echo ""
	@echo "Demo completed. Compare ACK patterns in qlog files"

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
integrate-experimental: ## –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
	@echo "üîó Integrating experimental features into main project..."
	@echo ""
	@echo "1. Copying experimental components..."
	@mkdir -p internal/experimental
	@echo "2. Updating main.go with experimental flags..."
	@echo "3. Creating experimental build target..."
	@echo ""
	@echo "‚úÖ Integration completed"
	@echo "Use 'make build-experimental' to build with experimental features"

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
docs-experimental: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
	@echo "üìö Generating experimental features documentation..."
	@echo ""
	@echo "Experimental QUIC Features:"
	@echo "=========================="
	@echo ""
	@echo "1. ACK Frequency Optimization:"
	@echo "   - Reduces ACK overhead"
	@echo "   - Improves high-throughput scenarios"
	@echo "   - Configurable via -ack-freq flag"
	@echo ""
	@echo "2. Switchable Congestion Control:"
	@echo "   - CUBIC: Standard TCP-like algorithm"
	@echo "   - BBR: Google's Bottleneck Bandwidth and RTT"
	@echo "   - BBRv2: Improved BBR with better fairness"
	@echo "   - RENO: Classic TCP Reno algorithm"
	@echo ""
	@echo "3. qlog Tracing:"
	@echo "   - Detailed packet-level tracing"
	@echo "   - Compatible with qvis visualization"
	@echo "   - Per-connection event logging"
	@echo ""
	@echo "4. Multipath QUIC (Experimental):"
	@echo "   - Multiple network paths"
	@echo "   - Load balancing strategies"
	@echo "   - Path failure recovery"
	@echo ""
	@echo "5. FEC for Datagrams:"
	@echo "   - Forward Error Correction"
	@echo "   - Reduces retransmissions"
	@echo "   - Configurable redundancy"
	@echo ""
	@echo "6. QUIC Bit Greasing:"
	@echo "   - RFC 9287 compliance"
	@echo "   - Anti-ossification"
	@echo "   - Future-proofing"

# –í—Å–µ –∫–æ–º–∞–Ω–¥—ã
all-experimental: clean-experimental build-experimental test-experimental ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	@echo "üéâ All experimental tasks completed!"

