package cli

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"
	"time"

	"quck-test/internal/dashboard"
	"quck-test/internal/quic"

	"go.uber.org/zap"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç—Ä–∏–∫
var metricsManager = dashboard.NewMetricsManager()

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π QUIC –º–µ–Ω–µ–¥–∂–µ—Ä
var quicManager *quic.QUICManager

// Command –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É CLI
type Command struct {
	Name        string
	Description string
	Handler     func(args []string) error
}

// Commands —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
var Commands = map[string]Command{
	"server": {
		Name:        "server",
		Description: "–ó–∞–ø—É—Å–∫ QUIC —Å–µ—Ä–≤–µ—Ä–∞",
		Handler:     runServer,
	},
	"client": {
		Name:        "client",
		Description: "–ó–∞–ø—É—Å–∫ QUIC –∫–ª–∏–µ–Ω—Ç–∞",
		Handler:     runClient,
	},
	"test": {
		Name:        "test",
		Description: "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä+–∫–ª–∏–µ–Ω—Ç)",
		Handler:     runTest,
	},
	"dashboard": {
		Name:        "dashboard",
		Description: "–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
		Handler:     runDashboard,
	},
	"masque": {
		Name:        "masque",
		Description: "–ó–∞–ø—É—Å–∫ MASQUE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
		Handler:     runMASQUE,
	},
	"ice": {
		Name:        "ice",
		Description: "–ó–∞–ø—É—Å–∫ ICE/STUN/TURN —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
		Handler:     runICE,
	},
	"enhanced": {
		Name:        "enhanced",
		Description: "–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (MASQUE + ICE + QUIC)",
		Handler:     runEnhanced,
	},
}

// ParseFlags –ø–∞—Ä—Å–∏—Ç —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
func ParseFlags() (string, map[string]interface{}) {
	mode := flag.String("mode", "server", "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: server, client, test, dashboard, masque, ice, enhanced")

	// –û–±—â–∏–µ —Ñ–ª–∞–≥–∏
	addr := flag.String("addr", "localhost:8443", "–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞")
	cert := flag.String("cert", "server.crt", "–ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É")
	key := flag.String("key", "server.key", "–ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É")
	prometheus := flag.Bool("prometheus", false, "–í–∫–ª—é—á–∏—Ç—å Prometheus –º–µ—Ç—Ä–∏–∫–∏")

	// –§–ª–∞–≥–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	connections := flag.Int("connections", 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
	streams := flag.Int("streams", 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
	packetSize := flag.Int("packet-size", 1024, "–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞")
	rate := flag.Int("rate", 100, "–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫)")
	pattern := flag.String("pattern", "burst", "–ü–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏: burst, steady, random")

	// –§–ª–∞–≥–∏ –¥–ª—è MASQUE
	masqueServer := flag.String("masque-server", "localhost:8443", "MASQUE —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
	masqueTargets := flag.String("masque-targets", "8.8.8.8:53,1.1.1.1:53", "–¶–µ–ª–µ–≤—ã–µ —Ö–æ—Å—Ç—ã –¥–ª—è CONNECT-UDP (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

	// –§–ª–∞–≥–∏ –¥–ª—è ICE
	iceStunServers := flag.String("ice-stun", "stun.l.google.com:19302,stun1.l.google.com:19302", "STUN —Å–µ—Ä–≤–µ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
	iceTurnServers := flag.String("ice-turn", "", "TURN —Å–µ—Ä–≤–µ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
	iceTurnUser := flag.String("ice-turn-user", "", "TURN username")
	iceTurnPass := flag.String("ice-turn-pass", "", "TURN password")

	flag.Parse()

	config := map[string]interface{}{
		"addr":           *addr,
		"cert":           *cert,
		"key":            *key,
		"prometheus":     *prometheus,
		"connections":    *connections,
		"streams":        *streams,
		"packetSize":     *packetSize,
		"rate":           *rate,
		"pattern":        *pattern,
		"masqueServer":   *masqueServer,
		"masqueTargets":  *masqueTargets,
		"iceStunServers": *iceStunServers,
		"iceTurnServers": *iceTurnServers,
		"iceTurnUser":    *iceTurnUser,
		"iceTurnPass":    *iceTurnPass,
	}

	return *mode, config
}

// CreateLogger —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä
func CreateLogger() *zap.Logger {
	logger, err := zap.NewDevelopment()
	if err != nil {
		log.Fatal("Failed to create logger:", err)
	}
	return logger
}

// ShowHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
func ShowHelp() {
	fmt.Println("QUIC Testing Tool - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QUIC –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
	fmt.Println()
	fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
	fmt.Println("  quck-test -mode=<—Ä–µ–∂–∏–º> [—Ñ–ª–∞–≥–∏]")
	fmt.Println()
	fmt.Println("–†–µ–∂–∏–º—ã:")
	for name, cmd := range Commands {
		fmt.Printf("  %-10s - %s\n", name, cmd.Description)
	}
	fmt.Println()
	fmt.Println("–§–ª–∞–≥–∏:")
	flag.PrintDefaults()
}

// runServer –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
func runServer(args []string) error {
	fmt.Println("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞...")
	// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	return nil
}

// runClient –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç
func runClient(args []string) error {
	fmt.Println("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –∫–ª–∏–µ–Ω—Ç–∞...")
	// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
	return nil
}

// runTest –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func runTest(args []string) error {
	fmt.Println("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞ (—Å–µ—Ä–≤–µ—Ä+–∫–ª–∏–µ–Ω—Ç)...")
	// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	return nil
}

// runDashboard –∑–∞–ø—É—Å–∫–∞–µ—Ç dashboard
func runDashboard(args []string) error {
	fmt.Println("üöÄ Starting QUIC Testing Dashboard on http://localhost:9990")
	fmt.Println("üìä Open your browser and navigate to http://localhost:9990")
	fmt.Println("üõë Press Ctrl+C to stop the server")
	fmt.Println("üîç Advanced analysis features available at:")
	fmt.Println("   - /api/analysis/deep - Deep protocol analysis")
	fmt.Println("   - /api/analysis/protocol - Protocol analysis")
	fmt.Println("   - /api/network/simulation - Network simulation")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º QUIC –º–µ–Ω–µ–¥–∂–µ—Ä
	logger := CreateLogger()
	quicConfig := &quic.QUICManagerConfig{
		ServerAddr:     ":9001", // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è QUIC
		MaxConnections: 10,
		MaxStreams:     100,
		ConnectTimeout: 30 * time.Second,
		IdleTimeout:    60 * time.Second,
	}
	quicManager = quic.NewQUICManager(logger, quicConfig)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path == "/" {
			http.ServeFile(w, r, "index.html")
		} else {
			http.ServeFile(w, r, r.URL.Path[1:])
		}
	})

	// API endpoints
	http.HandleFunc("/api/status", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		if quicManager != nil {
			json.NewEncoder(w).Encode(quicManager.GetStatus())
		} else {
			json.NewEncoder(w).Encode(map[string]interface{}{
				"server": map[string]interface{}{
					"running": false,
				},
				"client": map[string]interface{}{
					"running": false,
				},
			})
		}
	})

	// Metrics endpoint
	http.HandleFunc("/api/metrics", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		metricsManager.UpdateMetrics()
		json.NewEncoder(w).Encode(metricsManager.GetMetrics())
	})

	// Config endpoint
	http.HandleFunc("/api/config", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"server": map[string]interface{}{
				"addr": ":9001", // QUIC Testing Tool —Å–µ—Ä–≤–µ—Ä (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç)
				"cert": "server.crt",
				"key":  "server.key",
			},
			"client": map[string]interface{}{
				"addr":        "localhost:9001", // QUIC Testing Tool –∫–ª–∏–µ–Ω—Ç (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç)
				"connections": 1,
				"streams":     1,
				"packetSize":  1200,
				"rate":        100,
				"pattern":     "random",
			},
		})
	})

	// QUIC Server API endpoints
	http.HandleFunc("/api/server/start", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		if quicManager != nil {
			err := quicManager.StartServer()
			if err != nil {
				json.NewEncoder(w).Encode(map[string]interface{}{
					"status":  "error",
					"message": err.Error(),
				})
				return
			}
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "started",
				"message": "QUIC server started on port 9001",
			})
		} else {
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "error",
				"message": "QUIC manager not initialized",
			})
		}
	})

	http.HandleFunc("/api/server/stop", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		if quicManager != nil {
			err := quicManager.StopServer()
			if err != nil {
				json.NewEncoder(w).Encode(map[string]interface{}{
					"status":  "error",
					"message": err.Error(),
				})
				return
			}
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "stopped",
				"message": "QUIC server stopped",
			})
		} else {
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "error",
				"message": "QUIC manager not initialized",
			})
		}
	})

	// QUIC Client API endpoints
	http.HandleFunc("/api/client/start", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		if quicManager != nil {
			err := quicManager.StartClient()
			if err != nil {
				json.NewEncoder(w).Encode(map[string]interface{}{
					"status":  "error",
					"message": err.Error(),
				})
				return
			}
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "started",
				"message": "QUIC client connected to localhost:9001",
			})
		} else {
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "error",
				"message": "QUIC manager not initialized",
			})
		}
	})

	http.HandleFunc("/api/client/stop", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		if quicManager != nil {
			err := quicManager.StopClient()
			if err != nil {
				json.NewEncoder(w).Encode(map[string]interface{}{
					"status":  "error",
					"message": err.Error(),
				})
				return
			}
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "stopped",
				"message": "QUIC client disconnected",
			})
		} else {
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "error",
				"message": "QUIC manager not initialized",
			})
		}
	})

	// QUIC Test API endpoint
	http.HandleFunc("/api/test/start", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		if quicManager != nil {
			// –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
			var testParams struct {
				PacketSize  int `json:"packet_size"`
				PacketCount int `json:"packet_count"`
				Duration    int `json:"duration"` // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
			}

			if err := json.NewDecoder(r.Body).Decode(&testParams); err != nil {
				json.NewEncoder(w).Encode(map[string]interface{}{
					"status":  "error",
					"message": "Invalid test parameters",
				})
				return
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			if testParams.PacketSize == 0 {
				testParams.PacketSize = 1200
			}
			if testParams.PacketCount == 0 {
				testParams.PacketCount = 10
			}
			if testParams.Duration == 0 {
				testParams.Duration = 30
			}

			// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞
			testConfig := &quic.TestConfig{
				PacketSize:  testParams.PacketSize,
				PacketCount: testParams.PacketCount,
				Duration:    time.Duration(testParams.Duration) * time.Second,
			}

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
			ctx := context.Background()
			err := quicManager.RunTest(ctx, testConfig)
			if err != nil {
				json.NewEncoder(w).Encode(map[string]interface{}{
					"status":  "error",
					"message": err.Error(),
				})
				return
			}

			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "started",
				"message": "QUIC test started",
				"config":  testConfig,
			})
		} else {
			json.NewEncoder(w).Encode(map[string]interface{}{
				"status":  "error",
				"message": "QUIC manager not initialized",
			})
		}
	})

	// MASQUE API endpoints
	http.HandleFunc("/api/masque/start", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		metricsManager.SetMASQUEActive(true)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"status":  "started",
			"message": "MASQUE testing started",
		})
	})

	http.HandleFunc("/api/masque/stop", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		metricsManager.SetMASQUEActive(false)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"status":  "stopped",
			"message": "MASQUE testing stopped",
		})
	})

	// ICE API endpoints
	http.HandleFunc("/api/ice/start", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		metricsManager.SetICEActive(true)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"status":  "started",
			"message": "ICE testing started",
		})
	})

	http.HandleFunc("/api/ice/stop", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		metricsManager.SetICEActive(false)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"status":  "stopped",
			"message": "ICE testing stopped",
		})
	})

	// History endpoint –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
	http.HandleFunc("/api/history", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(metricsManager.GetHistory())
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Fatal(http.ListenAndServe(":9990", nil))
	return nil
}

// runMASQUE –∑–∞–ø—É—Å–∫–∞–µ—Ç MASQUE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func runMASQUE(args []string) error {
	fmt.Println("üî• –ó–∞–ø—É—Å–∫ MASQUE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
	// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ cmd/masque
	// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ MASQUE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	return nil
}

// runICE –∑–∞–ø—É—Å–∫–∞–µ—Ç ICE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func runICE(args []string) error {
	fmt.Println("üßä –ó–∞–ø—É—Å–∫ ICE/STUN/TURN —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
	// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ cmd/ice
	// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ ICE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	return nil
}

// runEnhanced –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func runEnhanced(args []string) error {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (MASQUE + ICE + QUIC)...")
	// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ cmd/enhanced
	// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	return nil
}
