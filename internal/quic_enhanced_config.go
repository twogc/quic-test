package internal

import (
	"fmt"
	"time"

	"github.com/quic-go/quic-go"
)

// EnhancedQUICConfig —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è QUIC —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
type EnhancedQUICConfig struct {
	// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	MaxIdleTimeout    time.Duration
	HandshakeTimeout  time.Duration
	KeepAlive         time.Duration
	MaxStreams        int64
	MaxStreamData     int64
	Enable0RTT        bool
	EnableKeyUpdate   bool
	EnableDatagrams   bool
	
	// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	CongestionControl    string        // cubic, bbr, bbrv2, reno
	ACKFrequency         int           // ACK frequency (0 = auto)
	MaxACKDelay          time.Duration // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ACK
	EnableMultipath      bool          // Multipath QUIC (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
	EnableFEC            bool          // Forward Error Correction –¥–ª—è datagrams
	EnableQlog           bool          // qlog —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
	EnableGreasing       bool          // QUIC bit greasing (RFC 9287)
	
	// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	EnableGSO            bool          // UDP GSO (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
	EnableGRO            bool          // UDP GRO (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
	SocketBufferSize     int           // –†–∞–∑–º–µ—Ä —Å–æ–∫–µ—Ç –±—É—Ñ–µ—Ä–æ–≤
	EnableNUMA           bool          // NUMA pinning
	
	// –ù–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å
	QlogDir              string        // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è qlog —Ñ–∞–π–ª–æ–≤
	EnableTracing        bool          // OpenTelemetry —Ç—Ä–µ–π—Å–∏–Ω–≥
	MetricsInterval      time.Duration // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
}

// CreateEnhancedQUICConfig —Å–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é QUIC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func CreateEnhancedQUICConfig(cfg TestConfig, enhanced *EnhancedQUICConfig) *quic.Config {
	config := &quic.Config{
		// –í–µ—Ä—Å–∏–∏ QUIC —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π v2
		Versions: []quic.Version{
			quic.Version2, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç v2
			quic.Version1,
		},
	}
	
	// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if enhanced.MaxIdleTimeout > 0 {
		config.MaxIdleTimeout = enhanced.MaxIdleTimeout
	} else if cfg.MaxIdleTimeout > 0 {
		config.MaxIdleTimeout = cfg.MaxIdleTimeout
	}
	
	if enhanced.HandshakeTimeout > 0 {
		config.HandshakeIdleTimeout = enhanced.HandshakeTimeout
	} else if cfg.HandshakeTimeout > 0 {
		config.HandshakeIdleTimeout = cfg.HandshakeTimeout
	}
	
	if enhanced.KeepAlive > 0 {
		config.KeepAlivePeriod = enhanced.KeepAlive
	} else if cfg.KeepAlive > 0 {
		config.KeepAlivePeriod = cfg.KeepAlive
	}
	
	// –ü–æ—Ç–æ–∫–∏
	if enhanced.MaxStreams > 0 {
		config.MaxIncomingStreams = enhanced.MaxStreams
	} else if cfg.MaxStreams > 0 {
		config.MaxIncomingStreams = cfg.MaxStreams
	}
	
	if cfg.MaxIncomingStreams > 0 {
		config.MaxIncomingStreams = cfg.MaxIncomingStreams
	}
	
	if cfg.MaxIncomingUniStreams > 0 {
		config.MaxIncomingUniStreams = cfg.MaxIncomingUniStreams
	}
	
	// –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞
	if enhanced.MaxStreamData > 0 {
		config.MaxStreamReceiveWindow = uint64(enhanced.MaxStreamData)
	} else if cfg.MaxStreamData > 0 {
		config.MaxStreamReceiveWindow = uint64(cfg.MaxStreamData)
	}
	
	// 0-RTT
	if enhanced.Enable0RTT || cfg.Enable0RTT {
		config.Allow0RTT = true
	}
	
	// Key Update
	if enhanced.EnableKeyUpdate || cfg.EnableKeyUpdate {
		config.DisablePathMTUDiscovery = false
	}
	
	// Datagrams
	if enhanced.EnableDatagrams || cfg.EnableDatagrams {
		config.EnableDatagrams = true
	}
	
	// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if enhanced.EnableGreasing {
		// –í–∫–ª—é—á–∞–µ–º greasing QUIC bit (RFC 9287)
		// config.DisableVersionNegotiationPackets = false // –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ quic-go
	}
	
	// Path MTU Discovery
	config.DisablePathMTUDiscovery = false
	
	return config
}

// CreateServerEnhancedQUICConfig —Å–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
func CreateServerEnhancedQUICConfig(cfg TestConfig, enhanced *EnhancedQUICConfig) *quic.Config {
	config := CreateEnhancedQUICConfig(cfg, enhanced)
	
	// –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	// config.RequireAddressValidation = func(addr net.Addr) bool {
	//	// –î–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –º–æ–∂–Ω–æ –æ—Å–ª–∞–±–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
	//	if enhanced.EnableMultipath {
	//		return false // Multipath –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	//	}
	//	return true
	// }
	
	return config
}

// CreateClientEnhancedQUICConfig —Å–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func CreateClientEnhancedQUICConfig(cfg TestConfig, enhanced *EnhancedQUICConfig) *quic.Config {
	config := CreateEnhancedQUICConfig(cfg, enhanced)
	
	// –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	config.TokenStore = quic.NewLRUTokenStore(10, int(time.Hour.Seconds()))
	
	// –î–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
	if enhanced.EnableMultipath {
		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è multipath (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
		config.DisablePathMTUDiscovery = false
	}
	
	return config
}

// PrintEnhancedQUICConfig –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö QUIC –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
func PrintEnhancedQUICConfig(cfg TestConfig, enhanced *EnhancedQUICConfig) {
	fmt.Printf("üöÄ Enhanced QUIC Configuration:\n")
	
	// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if enhanced.MaxIdleTimeout > 0 {
		fmt.Printf("  - Max Idle Timeout: %v\n", enhanced.MaxIdleTimeout)
	}
	if enhanced.HandshakeTimeout > 0 {
		fmt.Printf("  - Handshake Timeout: %v\n", enhanced.HandshakeTimeout)
	}
	if enhanced.KeepAlive > 0 {
		fmt.Printf("  - Keep Alive: %v\n", enhanced.KeepAlive)
	}
	
	// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if enhanced.CongestionControl != "" {
		fmt.Printf("  - Congestion Control: %s\n", enhanced.CongestionControl)
	}
	if enhanced.ACKFrequency > 0 {
		fmt.Printf("  - ACK Frequency: %d\n", enhanced.ACKFrequency)
	}
	if enhanced.MaxACKDelay > 0 {
		fmt.Printf("  - Max ACK Delay: %v\n", enhanced.MaxACKDelay)
	}
	if enhanced.EnableMultipath {
		fmt.Printf("  - Multipath QUIC: enabled (experimental)\n")
	}
	if enhanced.EnableFEC {
		fmt.Printf("  - FEC for Datagrams: enabled\n")
	}
	if enhanced.EnableQlog {
		fmt.Printf("  - qlog Tracing: enabled\n")
	}
	if enhanced.EnableGreasing {
		fmt.Printf("  - QUIC Bit Greasing: enabled\n")
	}
	
	// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	if enhanced.EnableGSO {
		fmt.Printf("  - UDP GSO: enabled\n")
	}
	if enhanced.EnableGRO {
		fmt.Printf("  - UDP GRO: enabled\n")
	}
	if enhanced.SocketBufferSize > 0 {
		fmt.Printf("  - Socket Buffer Size: %d bytes\n", enhanced.SocketBufferSize)
	}
	if enhanced.EnableNUMA {
		fmt.Printf("  - NUMA Pinning: enabled\n")
	}
	
	// –ù–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å
	if enhanced.EnableTracing {
		fmt.Printf("  - OpenTelemetry Tracing: enabled\n")
	}
	if enhanced.QlogDir != "" {
		fmt.Printf("  - qlog Directory: %s\n", enhanced.QlogDir)
	}
	
	fmt.Println()
}

// DefaultEnhancedConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
func DefaultEnhancedConfig() *EnhancedQUICConfig {
	return &EnhancedQUICConfig{
		// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		MaxIdleTimeout:   60 * time.Second,
		HandshakeTimeout: 10 * time.Second,
		KeepAlive:        30 * time.Second,
		MaxStreams:       100,
		MaxStreamData:    1024 * 1024, // 1MB
		Enable0RTT:       true,
		EnableKeyUpdate:  true,
		EnableDatagrams:  true,
		
		// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		CongestionControl: "bbr",        // BBR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		ACKFrequency:      0,            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
		MaxACKDelay:       25 * time.Millisecond,
		EnableMultipath:   false,       // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		EnableFEC:         false,       // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		EnableQlog:       true,         // –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		EnableGreasing:   true,         // RFC 9287
		
		// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		EnableGSO:        true,         // –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
		EnableGRO:        true,         // –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
		SocketBufferSize: 1024 * 1024,  // 1MB
		EnableNUMA:       false,        // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		
		// –ù–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å
		QlogDir:         "./qlog",
		EnableTracing:   true,
		MetricsInterval: 1 * time.Second,
	}
}
