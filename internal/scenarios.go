package internal

import (
	"fmt"
	"time"
)

// TestScenario –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
type TestScenario struct {
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Config      TestConfig    `json:"config"`
	Expected    ExpectedMetrics `json:"expected"`
}

// ExpectedMetrics –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
type ExpectedMetrics struct {
	MinThroughput float64       `json:"min_throughput"` // KB/s
	MaxRTT        time.Duration `json:"max_rtt"`
	MaxLoss       float64       `json:"max_loss"`
	MaxErrors     int64         `json:"max_errors"`
}

// GetScenario –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ –∏–º–µ–Ω–∏
func GetScenario(name string) (*TestScenario, error) {
	scenarios := map[string]TestScenario{
		"wifi": {
			Name:        "WiFi Network",
			Description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è WiFi —Å–µ—Ç—å —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –ø–æ—Ç–µ—Ä—è–º–∏",
			Config: TestConfig{
				Mode:          "test",
				Addr:          ":9000",
				Connections:   2,
				Streams:       4,
				Duration:      30 * time.Second,
				PacketSize:    1200,
				Rate:          100,
				EmulateLoss:   0.02, // 2%
				EmulateLatency: 10 * time.Millisecond,
				EmulateDup:    0.01, // 1%
			},
			Expected: ExpectedMetrics{
				MinThroughput: 50.0,  // KB/s
				MaxRTT:        50 * time.Millisecond,
				MaxLoss:       0.05,  // 5%
				MaxErrors:     10,
			},
		},
		"lte": {
			Name:        "LTE Network",
			Description: "–ú–æ–±–∏–ª—å–Ω–∞—è LTE —Å–µ—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏",
			Config: TestConfig{
				Mode:          "test",
				Addr:          ":9000",
				Connections:   2,
				Streams:       4,
				Duration:      30 * time.Second,
				PacketSize:    1200,
				Rate:          100,
				EmulateLoss:   0.05, // 5%
				EmulateLatency: 30 * time.Millisecond,
				EmulateDup:    0.02, // 2%
			},
			Expected: ExpectedMetrics{
				MinThroughput: 30.0,  // KB/s
				MaxRTT:        100 * time.Millisecond,
				MaxLoss:       0.08,  // 8%
				MaxErrors:     20,
			},
		},
		"sat": {
			Name:        "Satellite Network",
			Description: "–°–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å —Å –≤—ã—Å–æ–∫–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏",
			Config: TestConfig{
				Mode:          "test",
				Addr:          ":9000",
				Connections:   1,
				Streams:       2,
				Duration:      60 * time.Second,
				PacketSize:    1200,
				Rate:          50,
				EmulateLoss:   0.01, // 1%
				EmulateLatency: 500 * time.Millisecond,
				EmulateDup:    0.005, // 0.5%
			},
			Expected: ExpectedMetrics{
				MinThroughput: 10.0,  // KB/s
				MaxRTT:        1000 * time.Millisecond,
				MaxLoss:       0.02,  // 2%
				MaxErrors:     5,
			},
		},
		"dc-eu": {
			Name:        "Data Center EU",
			Description: "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä —Å –Ω–∏–∑–∫–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏",
			Config: TestConfig{
				Mode:          "test",
				Addr:          ":9000",
				Connections:   4,
				Streams:       8,
				Duration:      30 * time.Second,
				PacketSize:    1200,
				Rate:          200,
				EmulateLoss:   0.001, // 0.1%
				EmulateLatency: 1 * time.Millisecond,
				EmulateDup:    0.001, // 0.1%
			},
			Expected: ExpectedMetrics{
				MinThroughput: 200.0, // KB/s
				MaxRTT:        10 * time.Millisecond,
				MaxLoss:       0.005, // 0.5%
				MaxErrors:     2,
			},
		},
		"ru-eu": {
			Name:        "Russia to EU",
			Description: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –†–æ—Å—Å–∏—è-–ï–≤—Ä–æ–ø–∞",
			Config: TestConfig{
				Mode:          "test",
				Addr:          ":9000",
				Connections:   2,
				Streams:       4,
				Duration:      45 * time.Second,
				PacketSize:    1200,
				Rate:          100,
				EmulateLoss:   0.03, // 3%
				EmulateLatency: 80 * time.Millisecond,
				EmulateDup:    0.01, // 1%
			},
			Expected: ExpectedMetrics{
				MinThroughput: 40.0,  // KB/s
				MaxRTT:        150 * time.Millisecond,
				MaxLoss:       0.05,  // 5%
				MaxErrors:     15,
			},
		},
		"loss-burst": {
			Name:        "Loss Burst",
			Description: "–°—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –≤—Å–ø–ª–µ—Å–∫–∞–º–∏ –ø–æ—Ç–µ—Ä—å",
			Config: TestConfig{
				Mode:          "test",
				Addr:          ":9000",
				Connections:   2,
				Streams:       4,
				Duration:      60 * time.Second,
				PacketSize:    1200,
				Rate:          100,
				EmulateLoss:   0.1, // 10% - –≤—ã—Å–æ–∫–∏–µ –ø–æ—Ç–µ—Ä–∏
				EmulateLatency: 20 * time.Millisecond,
				EmulateDup:    0.05, // 5%
			},
			Expected: ExpectedMetrics{
				MinThroughput: 20.0,  // KB/s
				MaxRTT:        200 * time.Millisecond,
				MaxLoss:       0.15, // 15%
				MaxErrors:     50,
			},
		},
		"reorder": {
			Name:        "Packet Reordering",
			Description: "–°—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–æ–≤",
			Config: TestConfig{
				Mode:          "test",
				Addr:          ":9000",
				Connections:   2,
				Streams:       4,
				Duration:      30 * time.Second,
				PacketSize:    1200,
				Rate:          100,
				EmulateLoss:   0.02, // 2%
				EmulateLatency: 15 * time.Millisecond,
				EmulateDup:    0.1, // 10% - –≤—ã—Å–æ–∫–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
			},
			Expected: ExpectedMetrics{
				MinThroughput: 30.0,  // KB/s
				MaxRTT:        100 * time.Millisecond,
				MaxLoss:       0.05,  // 5%
				MaxErrors:     25,
			},
		},
	}
	
	scenario, exists := scenarios[name]
	if !exists {
		return nil, fmt.Errorf("—Å—Ü–µ–Ω–∞—Ä–∏–π '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω", name)
	}
	
	return &scenario, nil
}

// ListScenarios –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
func ListScenarios() []string {
	return []string{
		"wifi",
		"lte", 
		"sat",
		"dc-eu",
		"ru-eu",
		"loss-burst",
		"reorder",
	}
}

// PrintScenarioInfo –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
func PrintScenarioInfo(scenario *TestScenario) {
	fmt.Printf("üéØ Test Scenario: %s\n", scenario.Name)
	fmt.Printf("üìù Description: %s\n", scenario.Description)
	fmt.Printf("‚öôÔ∏è  Configuration:\n")
	fmt.Printf("  - Connections: %d\n", scenario.Config.Connections)
	fmt.Printf("  - Streams: %d\n", scenario.Config.Streams)
	fmt.Printf("  - Duration: %v\n", scenario.Config.Duration)
	fmt.Printf("  - Packet Size: %d bytes\n", scenario.Config.PacketSize)
	fmt.Printf("  - Rate: %d packets/s\n", scenario.Config.Rate)
	fmt.Printf("  - Loss: %.2f%%\n", scenario.Config.EmulateLoss*100)
	fmt.Printf("  - Latency: %v\n", scenario.Config.EmulateLatency)
	fmt.Printf("  - Duplication: %.2f%%\n", scenario.Config.EmulateDup*100)
	fmt.Printf("üìä Expected Metrics:\n")
	fmt.Printf("  - Min Throughput: %.1f KB/s\n", scenario.Expected.MinThroughput)
	fmt.Printf("  - Max RTT: %v\n", scenario.Expected.MaxRTT)
	fmt.Printf("  - Max Loss: %.2f%%\n", scenario.Expected.MaxLoss*100)
	fmt.Printf("  - Max Errors: %d\n", scenario.Expected.MaxErrors)
	fmt.Println()
}

// RunScenario –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
func RunScenario(scenarioName string) error {
	scenario, err := GetScenario(scenarioName)
	if err != nil {
		return err
	}
	
	PrintScenarioInfo(scenario)
	
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å—Ü–µ–Ω–∞—Ä–∏—è
	
	return nil
}

// ValidateScenario –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
func ValidateScenario(scenario *TestScenario, metrics map[string]interface{}) (bool, []string) {
	var violations []string
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
	throughput := getFloat64(metrics, "ThroughputAverage")
	if throughput < scenario.Expected.MinThroughput {
		violations = append(violations, fmt.Sprintf("Throughput %.2f KB/s below expected %.2f KB/s", 
			throughput, scenario.Expected.MinThroughput))
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º RTT
	latencies, _ := metrics["Latencies"].([]float64)
	if len(latencies) > 0 {
		_, p95, _ := calcPercentiles(latencies)
		actualRTT := time.Duration(p95 * float64(time.Millisecond))
		if actualRTT > scenario.Expected.MaxRTT {
			violations = append(violations, fmt.Sprintf("RTT p95 %v exceeds expected %v", 
				actualRTT, scenario.Expected.MaxRTT))
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä—é –ø–∞–∫–µ—Ç–æ–≤
	packetLoss := getFloat64(metrics, "PacketLoss")
	if packetLoss > scenario.Expected.MaxLoss {
		violations = append(violations, fmt.Sprintf("Packet loss %.2f%% exceeds expected %.2f%%", 
			packetLoss*100, scenario.Expected.MaxLoss*100))
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
	errors := getInt64(metrics, "Errors")
	if errors > scenario.Expected.MaxErrors {
		violations = append(violations, fmt.Sprintf("Error count %d exceeds expected %d", 
			errors, scenario.Expected.MaxErrors))
	}
	
	return len(violations) == 0, violations
}
