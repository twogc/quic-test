package main

import (
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"quic-test/internal"
)

func main() {
	// –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–ª–∞–≥–æ–≤
	addr := flag.String("addr", ":9990", "–ê–¥—Ä–µ—Å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
	flag.Parse()

	fmt.Println("\033[1;36m==============================\033[0m")
	fmt.Println("\033[1;36m  2GC CloudBridge Dashboard\033[0m")
	fmt.Println("\033[1;36m==============================\033[0m")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigs
		fmt.Println("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞...")
		os.Exit(0)
	}()

	startDashboard(*addr)
}

// startDashboard –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func startDashboard(addr string) {
	fmt.Println("üöÄ Starting QUIC Testing Dashboard on http://localhost:9990")
	fmt.Println("üìä Open your browser and navigate to http://localhost:9990")
	fmt.Println("üõë Press Ctrl+C to stop the server")
	fmt.Println("üîç Advanced analysis features available at:")
	fmt.Println("   - /api/status - Dashboard status")
	fmt.Println("   - /api/run - Start test")
	fmt.Println("   - /api/stop - Stop test")
	fmt.Println("   - /api/preset - Manage presets")
	fmt.Println("   - /api/report - Get reports")
	fmt.Println("   - /api/metrics - Real-time metrics")
	fmt.Println("   - /api/events - Server-Sent Events")

	// –°–æ–∑–¥–∞–µ–º API –∏ SSE –º–µ–Ω–µ–¥–∂–µ—Ä
	api := internal.NewDashboardAPI()
	sseManager := internal.NewSSEManager()

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	http.Handle("/static/", http.StripPrefix("/static/", internal.StaticFileHandler()))
	http.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path == "/" {
			// –û—Ç–¥–∞–µ–º index.html –∏–∑ embed.FS
			http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
				internal.ServeStatic(w, r)
			})
		} else {
			internal.ServeStatic(w, r)
		}
	}))

	// API endpoints
	http.HandleFunc("/api/status", api.StatusHandler)
	http.HandleFunc("/api/run", api.RunTestHandler)
	http.HandleFunc("/api/stop", api.StopTestHandler)
	http.HandleFunc("/api/preset", api.PresetHandler)
	http.HandleFunc("/api/report", api.ReportHandler)
	http.HandleFunc("/api/metrics", api.MetricsHandler)
	
	// SSE endpoint
	http.HandleFunc("/api/events", sseManager.SSEServerHandler)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	fmt.Printf("üöÄ Dashboard –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s\n", addr)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º goroutine –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
	go func() {
		ticker := time.NewTicker(1 * time.Second)
		defer ticker.Stop()
		
		for {
			select {
			case <-ticker.C:
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ SSE
				state := api.GetState()
				sseManager.BroadcastMetrics(state.Metrics)
				sseManager.BroadcastStatus(state.ServerRunning, state.ClientRunning)
			}
		}
	}()
	
	log.Fatal(http.ListenAndServe(addr, nil))
}
