package main

import (
	"context"
	"flag"
	"fmt"
	"strings"
	"time"

	"quic-test/internal/masque"

	"go.uber.org/zap"
)

// runMASQUETesting –∑–∞–ø—É—Å–∫–∞–µ—Ç MASQUE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
func runMASQUETesting(logger *zap.Logger, masqueServer, masqueTargets string) {
	logger.Info("Starting MASQUE testing",
		zap.String("server", masqueServer),
		zap.String("targets", masqueTargets))

	// –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—ã–µ —Ö–æ—Å—Ç—ã
	targets := strings.Split(masqueTargets, ",")
	for i, target := range targets {
		targets[i] = strings.TrimSpace(target)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MASQUE
	config := &masque.MASQUEConfig{
		ServerURL:       masqueServer,
		UDPTargets:      targets,
		IPTargets:       []string{"8.8.8.8", "1.1.1.1"},
		ConnectTimeout:  30 * time.Second,
		TestTimeout:     60 * time.Second,
		ConcurrentTests: 5,
		TestDuration:    30 * time.Second,
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º MASQUE —Ç–µ—Å—Ç–µ—Ä
	tester := masque.NewMASQUETester(logger, config)

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)
	defer cancel()

	if err := tester.Start(ctx); err != nil {
		logger.Fatal("Failed to start MASQUE testing", zap.Error(err))
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	<-ctx.Done()

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	metrics := tester.GetMetrics()

	logger.Info("MASQUE testing completed",
		zap.Int64("connect_udp_successes", metrics.ConnectUDPSuccesses),
		zap.Int64("connect_ip_successes", metrics.ConnectIPSuccesses),
		zap.Float64("datagram_loss_rate", metrics.DatagramLossRate),
		zap.Float64("throughput_mbps", metrics.Throughput),
		zap.Duration("average_latency", metrics.AverageLatency))

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
	if err := tester.Stop(); err != nil {
		logger.Error("Failed to stop MASQUE tester", zap.Error(err))
	}
}

func main() {
	// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	masqueServer := flag.String("server", "localhost:8443", "MASQUE —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
	masqueTargets := flag.String("targets", "8.8.8.8:53,1.1.1.1:53", "–¶–µ–ª–µ–≤—ã–µ —Ö–æ—Å—Ç—ã –¥–ª—è CONNECT-UDP (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
	verbose := flag.Bool("verbose", false, "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
	flag.Parse()

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
	var logger *zap.Logger
	var err error
	
	if *verbose {
		logger, err = zap.NewDevelopment()
	} else {
		logger, err = zap.NewProduction()
	}
	if err != nil {
		panic(fmt.Sprintf("Failed to create logger: %v", err))
	}
	defer logger.Sync()

	fmt.Println("üî• –ó–∞–ø—É—Å–∫ MASQUE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
	fmt.Printf("üåê –°–µ—Ä–≤–µ—Ä: %s\n", *masqueServer)
	fmt.Printf("üéØ –¶–µ–ª–∏: %s\n", *masqueTargets)

	// –ó–∞–ø—É—Å–∫–∞–µ–º MASQUE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	runMASQUETesting(logger, *masqueServer, *masqueTargets)
}
