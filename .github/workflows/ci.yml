name: QUIC Test CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.21'

jobs:
  # Stage 1: Lint
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify go.mod tidy
        run: |
          go mod tidy
          git diff --exit-code -- go.mod go.sum

      - name: Run go vet
        run: go vet ./...

      - name: Install and run golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8
          golangci-lint run --timeout=10m

  # Stage 2: Test
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  # Stage 3: Security
  security:
    name: Security
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || echo "Vulnerabilities found but continuing"

      - name: Run gosec
        uses: securego/gosec@v2.22.0
        continue-on-error: true
        with:
          args: '-fmt sarif -out gosec.sarif -timeout 5m ./...'

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec.sarif') != ''
        with:
          sarif_file: gosec.sarif

  # Stage 4: Build Test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test compilation
        run: |
          echo "Testing that code compiles successfully..."
          go build -v -o build/quic-test .
          go build -v -o build/quic-client ./cmd/quic-client
          go build -v -o build/quic-server ./cmd/quic-server
          go build -v -o build/dashboard ./cmd/dashboard
          echo "‚úÖ All binaries compile successfully"

      - name: Test Makefile
        run: |
          make build
          make test
          echo "‚úÖ Makefile targets work correctly"

      - name: Clean up test binaries
        run: rm -rf build/

  # Stage 5: Docker Build Test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Docker build
        run: |
          echo "Testing Docker builds..."
          docker build -t quic-test:test .
          docker build -f Dockerfile.dashboard -t quic-test-dashboard:test .
          echo "‚úÖ Docker builds successful"

      - name: Test docker-compose
        run: |
          echo "Testing docker-compose configuration..."
          docker-compose config
          echo "‚úÖ docker-compose configuration is valid"

  # Stage 6: Release Build & Publish (only for tags)
  release:
    name: Release Build & Publish  
    runs-on: ubuntu-latest
    needs: [lint, test, security, build-test, docker-test]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ github.ref_name }}
          path: |
            dist/*.zip
            dist/*.tar.gz
            dist/checksums.txt
          retention-days: 90

  # Summary job
  pipeline-success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, test, security, build-test, docker-test, release]
    if: always()
    steps:
      - name: Check pipeline status
        run: |
          echo "=== QUIC Test Pipeline Summary ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"  
          echo "Security: ${{ needs.security.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Docker Test: ${{ needs.docker-test.result }}"
          
          if [[ "${{ needs.release.result }}" != "skipped" ]]; then
            echo "Release: ${{ needs.release.result }}"
            echo "üöÄ Release pipeline completed!"
          else
            echo "‚úÖ CI pipeline completed (no release)!"
          fi
          
          # Check if any required job failed
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.security.result }}" != "success" || 
                "${{ needs.build-test.result }}" != "success" ||
                "${{ needs.docker-test.result }}" != "success" ]]; then
            echo "‚ùå Pipeline failed!"
            exit 1
          fi
          
          # Check release job if it ran
          if [[ "${{ needs.release.result }}" != "skipped" ]]; then
            if [[ "${{ needs.release.result }}" != "success" ]]; then
              echo "‚ùå Release failed!"
              exit 1
            fi
          fi
          
          echo "‚úÖ QUIC Test Pipeline successful!"