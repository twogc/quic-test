package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	"quic-test/client"
	"quic-test/internal"
	"quic-test/server"
)

func main() {
	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ --version
	version := flag.Bool("version", false, "–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã")
	
	fmt.Println("\033[1;36m==============================\033[0m")
	fmt.Println("\033[1;36m  2GC CloudBridge QUIC testing\033[0m")
	fmt.Println("\033[1;36m==============================\033[0m")
	fmt.Println("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ QUIC-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è CloudBridge 2GC")
	mode := flag.String("mode", "test", "–†–µ–∂–∏–º: server | client | test")
	addr := flag.String("addr", ":9000", "–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è")
	streams := flag.Int("streams", 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
	connections := flag.Int("connections", 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QUIC-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
	duration := flag.Duration("duration", 0, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (0 ‚Äî –¥–æ —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
	packetSize := flag.Int("packet-size", 1200, "–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (–±–∞–π—Ç)")
	rate := flag.Int("rate", 100, "–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥—É)")
	reportPath := flag.String("report", "", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
	reportFormat := flag.String("report-format", "md", "–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: csv | md | json")
	certPath := flag.String("cert", "", "–ü—É—Ç—å –∫ TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
	keyPath := flag.String("key", "", "–ü—É—Ç—å –∫ TLS-–∫–ª—é—á—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
	pattern := flag.String("pattern", "random", "–®–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã—Ö: random | zeroes | increment")
	noTLS := flag.Bool("no-tls", false, "–û—Ç–∫–ª—é—á–∏—Ç—å TLS (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)")
	prometheus := flag.Bool("prometheus", false, "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ Prometheus –Ω–∞ /metrics")
	emulateLoss := flag.Float64("emulate-loss", 0, "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–∞ (0..1)")
	emulateLatency := flag.Duration("emulate-latency", 0, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–∞–∫–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20ms)")
	emulateDup := flag.Float64("emulate-dup", 0, "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ (0..1)")
	
	// SLA —Ñ–ª–∞–≥–∏
	slaRttP95 := flag.Duration("sla-rtt-p95", 0, "SLA: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π RTT p95 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100ms)")
	slaLoss := flag.Float64("sla-loss", 0, "SLA: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è –ø–∞–∫–µ—Ç–æ–≤ (0..1, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.01 –¥–ª—è 1%)")
	slaThroughput := flag.Float64("sla-throughput", 0, "SLA: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (KB/s)")
	slaErrors := flag.Int64("sla-errors", 0, "SLA: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫")
	
	// QUIC —Ç—é–Ω–∏–Ω–≥ —Ñ–ª–∞–≥–∏
	cc := flag.String("cc", "", "–ê–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–æ–π: cubic, bbr, reno")
	maxIdleTimeout := flag.Duration("max-idle-timeout", 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
	handshakeTimeout := flag.Duration("handshake-timeout", 0, "–¢–∞–π–º–∞—É—Ç handshake")
	keepAlive := flag.Duration("keep-alive", 0, "–ò–Ω—Ç–µ—Ä–≤–∞–ª keep-alive")
	maxStreams := flag.Int64("max-streams", 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
	maxStreamData := flag.Int64("max-stream-data", 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞")
	enable0RTT := flag.Bool("enable-0rtt", false, "–í–∫–ª—é—á–∏—Ç—å 0-RTT")
	enableKeyUpdate := flag.Bool("enable-key-update", false, "–í–∫–ª—é—á–∏—Ç—å key update")
	enableDatagrams := flag.Bool("enable-datagrams", false, "–í–∫–ª—é—á–∏—Ç—å datagrams")
	maxIncomingStreams := flag.Int64("max-incoming-streams", 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤")
	maxIncomingUniStreams := flag.Int64("max-incoming-uni-streams", 0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö unidirectional –ø–æ—Ç–æ–∫–æ–≤")
	
	// –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	scenario := flag.String("scenario", "", "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: wifi, lte, sat, dc-eu, ru-eu, loss-burst, reorder")
	listScenarios := flag.Bool("list-scenarios", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
	
	// –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
	networkProfile := flag.String("network-profile", "", "–°–µ—Ç–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: wifi, lte, 5g, satellite, ethernet, fiber, datacenter")
	listProfiles := flag.Bool("list-profiles", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
	
	flag.Parse()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–∞ --version
	if *version {
		internal.PrintVersion()
		os.Exit(0)
	}

	cfg := internal.TestConfig{
		Mode:           *mode,
		Addr:           *addr,
		Streams:        *streams,
		Connections:    *connections,
		Duration:       *duration,
		PacketSize:     *packetSize,
		Rate:           *rate,
		ReportPath:     *reportPath,
		ReportFormat:   *reportFormat,
		CertPath:       *certPath,
		KeyPath:        *keyPath,
		Pattern:        *pattern,
		NoTLS:          *noTLS,
		Prometheus:     *prometheus,
		EmulateLoss:    *emulateLoss,
		EmulateLatency: *emulateLatency,
		EmulateDup:     *emulateDup,
		SlaRttP95:      *slaRttP95,
		SlaLoss:        *slaLoss,
		SlaThroughput:  *slaThroughput,
		SlaErrors:      *slaErrors,
		CongestionControl: *cc,
		MaxIdleTimeout:    *maxIdleTimeout,
		HandshakeTimeout:  *handshakeTimeout,
		KeepAlive:         *keepAlive,
		MaxStreams:        *maxStreams,
		MaxStreamData:      *maxStreamData,
		Enable0RTT:        *enable0RTT,
		EnableKeyUpdate:   *enableKeyUpdate,
		EnableDatagrams:   *enableDatagrams,
		MaxIncomingStreams: *maxIncomingStreams,
		MaxIncomingUniStreams: *maxIncomingUniStreams,
	}

	fmt.Printf("mode=%s, addr=%s, connections=%d, streams=%d, duration=%s, packet-size=%d, rate=%d, report=%s, report-format=%s, cert=%s, key=%s, pattern=%s, no-tls=%v, prometheus=%v\n",
		cfg.Mode, cfg.Addr, cfg.Connections, cfg.Streams, cfg.Duration.String(), cfg.PacketSize, cfg.Rate, cfg.ReportPath, cfg.ReportFormat, cfg.CertPath, cfg.KeyPath, cfg.Pattern, cfg.NoTLS, cfg.Prometheus)
	
	// –í—ã–≤–æ–¥–∏–º SLA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
	internal.PrintSLAConfig(cfg)
	
	// –í—ã–≤–æ–¥–∏–º QUIC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
	internal.PrintQUICConfig(cfg)
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
	if *listScenarios {
		fmt.Println("üìã Available Test Scenarios:")
		scenarios := internal.ListScenarios()
		for _, name := range scenarios {
			scenario, _ := internal.GetScenario(name)
			fmt.Printf("  - %s: %s\n", name, scenario.Description)
		}
		os.Exit(0)
	}
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
	if *listProfiles {
		fmt.Println("üåê Available Network Profiles:")
		profiles := internal.ListNetworkProfiles()
		for _, name := range profiles {
			profile, _ := internal.GetNetworkProfile(name)
			fmt.Printf("  - %s: %s\n", name, profile.Description)
		}
		os.Exit(0)
	}
	
	if *scenario != "" {
		scenarioConfig, err := internal.GetScenario(*scenario)
		if err != nil {
			fmt.Printf("‚ùå Error: %v\n", err)
			os.Exit(1)
		}
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è
		cfg = scenarioConfig.Config
		fmt.Printf("üéØ Running scenario: %s\n", scenarioConfig.Name)
	}
	
	if *networkProfile != "" {
		profile, err := internal.GetNetworkProfile(*networkProfile)
		if err != nil {
			fmt.Printf("‚ùå Error: %v\n", err)
			os.Exit(1)
		}
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
		internal.ApplyNetworkProfile(&cfg, profile)
		internal.PrintNetworkProfile(profile)
		internal.PrintProfileRecommendations(profile)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	_, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func(cancelFunc context.CancelFunc) {
		<-sigs
		fmt.Println("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
		cancelFunc() // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	}(cancel)

	switch cfg.Mode {
	case "server":
		fmt.Println("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞...")
		server.Run(cfg)
	case "client":
		fmt.Println("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –∫–ª–∏–µ–Ω—Ç–∞...")
		client.Run(cfg)
	case "test":
		fmt.Println("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞ (—Å–µ—Ä–≤–µ—Ä+–∫–ª–∏–µ–Ω—Ç)...")
		runTestMode(cfg)
	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º", cfg.Mode)
		os.Exit(1)
	}
}

// runTestMode –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func runTestMode(cfg internal.TestConfig) {
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	serverDone := make(chan struct{})
	go func() {
		defer close(serverDone)
		server.Run(cfg)
	}()
	
	// –ñ–¥–µ–º, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
	time.Sleep(3 * time.Second)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
	client.Run(cfg)
	
	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
	<-serverDone
}
