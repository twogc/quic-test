# 2GC Network Protocol Suite - Docker Compose
# Полное развертывание: сервер + клиент + дашборд + мониторинг

version: '3.8'

services:
  # QUIC сервер
  quic-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: 2gc-network-server
    command: ["./quic-server", "--mode=server", "--addr=:9000", "--prometheus", "--pprof-addr=:6060"]
    ports:
      - "9000:9000"   # QUIC сервер
      - "2113:2113"   # Prometheus метрики сервера
      - "6060:6060"   # pprof профилирование
    environment:
      - QUIC_SERVER_ADDR=:9000
      - QUIC_PROMETHEUS_SERVER_PORT=2113
      - QUIC_PPROF_ADDR=:6060
    networks:
      - quck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2113/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # QUIC клиент
  quic-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: 2gc-network-client
    command: ["./quic-client", "--mode=client", "--addr=quic-server:9000", "--connections=2", "--streams=4", "--rate=100", "--prometheus", "--duration=60s"]
    ports:
      - "2112:2112"   # Prometheus метрики клиента
    environment:
      - QUIC_CLIENT_ADDR=quic-server:9000
      - QUIC_PROMETHEUS_CLIENT_PORT=2112
    depends_on:
      quic-server:
        condition: service_healthy
    networks:
      - quck-network
    restart: "no"  # Запускается один раз для теста

  # Веб-дашборд
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: 2gc-network-dashboard
    command: ["./dashboard", "--mode=dashboard", "--addr=:9990"]
    ports:
      - "9990:9990"   # Веб-дашборд
    environment:
      - DASHBOARD_ADDR=:9990
    networks:
      - quck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9990/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: 2gc-network-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quck-network
    restart: unless-stopped
    depends_on:
      - quic-server
      - quic-client

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: 2gc-network-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - quck-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger для трейсинга (опционально)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: 2gc-network-jaeger
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - quck-network
    restart: unless-stopped

networks:
  quck-network:
    driver: bridge
    name: 2gc-network-suite

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Дополнительные сервисы для тестирования

  # Nginx для балансировки нагрузки (опционально)
  nginx:
    image: nginx:alpine
    container_name: 2gc-network-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - quck-network
    restart: unless-stopped
    depends_on:
      - dashboard
    profiles:
      - nginx

  # Redis для кэширования (опционально)
  redis:
    image: redis:alpine
    container_name: 2gc-network-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - quck-network
    restart: unless-stopped
    profiles:
      - redis

